d = 0.5*sum(abs(a/sum(a, na.rm=TRUE) - b/sum(b, na.rm=TRUE)))
return(d)
}
hindex <- function(races) {
#races_all to liczba osob w calym obszarze w podziale na grupy rasowo-etniczne
races_all = apply(races, 2, sum, na.rm=TRUE)
#liczba osob w calym obszarze
pop = sum(races_all, na.rm=TRUE)
#liczba osob w kazdej jednostce spisowej
pop_i = apply(races, 1, sum, na.rm=TRUE)
#odsetek osob w danej grupy rasowo-etnicznej w kazdej jednostce spisowej
proportions = races/pop_i
#odsetek osob w danej grupy rasowo-etnicznej w calym obszarze
proportions_all = races_all/sum(races_all, na.rm = TRUE)
#entropia dla kazdej jednostki spisowej
ent_i = apply(proportions, 1, entropy_fnc)
#entropia dla calego obszaru
ent = entropy_fnc(proportions_all)
#obliczenie H
hind = sum(pop_i*(ent-ent_i)/(ent*pop), na.rm=TRUE)
return(hind)
}
tracts1990 = read_sf("dane/dane_przestrzenne/census_tracts_1990.shp")
tracts2000 = read_sf("dane/dane_przestrzenne/census_tracts_2000.shp")
dane_tracts_1990 = tracts1990[tracts1990$CNT_CODE == "39061",]
dane_tracts_2000 = tracts2000[tracts2000$CNT_CODE == "39061",]
fshp90 <- dane_tracts_1990
fshp00 <- dane_tracts_2000
rm(tracts1990, tracts2000, dane_tracts_1990, dane_tracts_2000)
list_race <- c("white", "black", "american", "asian", "others", "latin")
dat90 <- read_sf("dc_tract_1990_attr.shp")
dat00 <- read_sf("dc_tract_2000_attr.shp")
#target units - granice z 2020 roku
target_units <- dat00[, c("GISJOIN")]
#source units - dane w granicach z 1990 roku
source_units <- dat90[, c("GISJOIN", list_race, "POP")]
colnames(source_units) <- c("GJOIN", list_race, "POP", "geometry")
head(target_units)
# # Przyciecie granic jednostek zrodlowych oraz jednostek docelowych
intersect <- aw_intersect(target_units,
source = source_units,
areaVar = "area")
head(intersect)
intersect <- aw_total(intersect,
source = source_units, #granice zrodlowe
id = GJOIN, #id jednostek zrodlowych
areaVar = "area", #nazwa pola z powierzchnia jednostek z przeciecia, Ai
totalVar = "totalArea",
type = "extensive",
weight = "sum")
head(intersect)
intersect <- aw_weight(intersect,
areaVar = "area", #Ai - obliczane przez aw_intersect
totalVar = "totalArea", #Aj, obliczane przez aw_total
areaWeight = "areaWeight") #Wi
head(intersect)
#Jesli argument newVar nie zostanie podany, zostanie nadpisana wartosc w kolumnie value.
intersect <- aw_calculate(intersect,
value = "POP", #kolumna do przeliczenia
newVar = "POPnew", #nazwa nowej kolumny z przeliczonymi danymi.
areaWeight = "areaWeight") #wagi obliczone przez aw_weight()
result <- aw_aggregate(intersect,
target = target_units, #granice docelowe
tid = GISJOIN, #id docelowe (target units)
interVar = "POPnew") #nazwa przeliczonej zmiennej
library(dplyr)
library(sf)
library(tmap)
library(kableExtra)
library(pals)
library(ggplot2)
library(areal)
library(gridExtra)
library(colourpicker)
entropy_fnc = function(proportions, base = exp(1)) {
entr = -sum(ifelse(proportions > 0, proportions * log(proportions, base = base), 0))
return(entr)
}
entropy_std_fnc = function(proportions, base = exp(1)) {
entr = -sum(ifelse(proportions > 0, proportions * log(proportions, base = base), 0)) #obliczenie entropii
entr_std = entr/log(length(proportions), base = base) #standaryzacja
return(entr_std)
}
d_ind = function(a, b) {
d = 0.5*sum(abs(a/sum(a, na.rm=TRUE) - b/sum(b, na.rm=TRUE)))
return(d)
}
hindex <- function(races) {
#races_all to liczba osob w calym obszarze w podziale na grupy rasowo-etniczne
races_all = apply(races, 2, sum, na.rm=TRUE)
#liczba osob w calym obszarze
pop = sum(races_all, na.rm=TRUE)
#liczba osob w kazdej jednostce spisowej
pop_i = apply(races, 1, sum, na.rm=TRUE)
#odsetek osob w danej grupy rasowo-etnicznej w kazdej jednostce spisowej
proportions = races/pop_i
#odsetek osob w danej grupy rasowo-etnicznej w calym obszarze
proportions_all = races_all/sum(races_all, na.rm = TRUE)
#entropia dla kazdej jednostki spisowej
ent_i = apply(proportions, 1, entropy_fnc)
#entropia dla calego obszaru
ent = entropy_fnc(proportions_all)
#obliczenie H
hind = sum(pop_i*(ent-ent_i)/(ent*pop), na.rm=TRUE)
return(hind)
}
tracts1990 = read_sf("dane/dane_przestrzenne/census_tracts_1990.shp")
tracts2000 = read_sf("dane/dane_przestrzenne/census_tracts_2000.shp")
dane_tracts_1990 = tracts1990[tracts1990$CNT_CODE == "39061",]
dane_tracts_2000 = tracts2000[tracts2000$CNT_CODE == "39061",]
library(dplyr)
library(sf)
library(tmap)
library(kableExtra)
library(pals)
library(ggplot2)
library(areal)
library(gridExtra)
library(colourpicker)
entropy_fnc = function(proportions, base = exp(1)) {
entr = -sum(ifelse(proportions > 0, proportions * log(proportions, base = base), 0))
return(entr)
}
entropy_std_fnc = function(proportions, base = exp(1)) {
entr = -sum(ifelse(proportions > 0, proportions * log(proportions, base = base), 0)) #obliczenie entropii
entr_std = entr/log(length(proportions), base = base) #standaryzacja
return(entr_std)
}
d_ind = function(a, b) {
d = 0.5*sum(abs(a/sum(a, na.rm=TRUE) - b/sum(b, na.rm=TRUE)))
return(d)
}
hindex <- function(races) {
#races_all to liczba osob w calym obszarze w podziale na grupy rasowo-etniczne
races_all = apply(races, 2, sum, na.rm=TRUE)
#liczba osob w calym obszarze
pop = sum(races_all, na.rm=TRUE)
#liczba osob w kazdej jednostce spisowej
pop_i = apply(races, 1, sum, na.rm=TRUE)
#odsetek osob w danej grupy rasowo-etnicznej w kazdej jednostce spisowej
proportions = races/pop_i
#odsetek osob w danej grupy rasowo-etnicznej w calym obszarze
proportions_all = races_all/sum(races_all, na.rm = TRUE)
#entropia dla kazdej jednostki spisowej
ent_i = apply(proportions, 1, entropy_fnc)
#entropia dla calego obszaru
ent = entropy_fnc(proportions_all)
#obliczenie H
hind = sum(pop_i*(ent-ent_i)/(ent*pop), na.rm=TRUE)
return(hind)
}
tracts1990 = read_sf("dane/dane_przestrzenne/census_tracts_1990.shp")
tracts2000 = read_sf("dane/dane_przestrzenne/census_tracts_2000.shp")
dane_tracts_1990 = tracts1990[tracts1990$CNT_CODE == "39061",]
dane_tracts_2000 = tracts2000[tracts2000$CNT_CODE == "39061",]
fshp90 <- dane_tracts_1990
fshp00 <- dane_tracts_2000
rm(tracts1990, tracts2000, dane_tracts_1990, dane_tracts_2000)
list_race <- c("white", "black", "american", "asian", "others", "latin")
dat90 <- read_sf("dc_tract_1990_attr.shp")
dat00 <- read_sf("dc_tract_2000_attr.shp")
library(raster)
library(rgdal)
miedzyzdroje_ndvi <- raster("dane_gotowe/ndvi_miedzyzdroje_przyciete.tif")
setwd("E:/Projekty/wolin_2022/ocena_korelacji/ocena-korelacji-NDVI-main/ocena-korelacji-NDVI")
miedzyzdroje_ndvi <- raster("dane_gotowe/ndvi_miedzyzdroje_przyciete.tif")
plot(miedzyzdroje_ndvi)
hist(miedzyzdroje_ndvi)
raster <- mask(miedzyzdroje_ndvi, 0)
(tmap)
(tmap)
(tmap)
(tmap)
(tmap)
library(tmap)
library(raster)
library(rgdal)
library(ggplot2)
library(plotly)
library(spatialEco)
library(dplyr)
# wczytanie rastrów
ndvi_miedzyzdroje <- raster("dane_gotowe/ndvi_miedzyzdroje.tif")
temp_miedzyzdroje <- raster("dane_gotowe/temp_miedzyzdroje.tif")
ndvi_WPN <- raster("dane_gotowe/ndvi_WPN.tif")
temp_WPN <- raster("dane_gotowe/temp_WPN.tif")
ndvi_WPN <- raster("ndvi_probne.tif")
temp_WPN <- raster("temp_probne.tif")
# podglad warstwy
tm_shape(ndvi_miedzyzdroje) + tm_raster()
ggplotly(ndvi_miedzyzdroje)
plot_ly(ndvi_miedzyzdroje)
plot_geo(ndvi_miedzyzdroje)
plot_geo(ndvi_miedzyzdroje, x = ~Lat, y = ~Lon) )
plot_geo(ndvi_miedzyzdroje, x = ~Lat, y = ~Lon)
library(leaflet)
leaflet() %>%
addRasterImage(r)
leaflet() %>%
addRasterImage(ndvi_WPN)
a <- leaflet() %>%
addRasterImage(ndvi_WPN)
ggplotly(a)
plot_ly(a)
install.packages("rasterly")
library(rasterly)
plot_ly(ndvi_WPN, x = ~Lat, y = ~Lon) %>%
add_rasterly_heatmap()
r <- as.raster(matrix(hcl(0, 80, seq(50, 80, 10)), nrow = 4, ncol = 5))
plot(r)
# embed the raster as an image
plot_ly(x = 1, y = 1) %>%
layout(
images = list(list(
source = raster2uri(r),
xref = "paper",
yref = "paper",
x = 0, y = 0,
sizex = 0.5, sizey = 0.5,
xanchor = "left", yanchor = "bottom"
))
)
plot_ly(ndvi_WPN, x = ~Lat, y = ~Lon) %>%
add_rasterly_heatmap()
leaflet() %>%
addRasterImage(ndvi_WPN)
library(tmap)
library(raster)
library(rgdal)
library(ggplot2)
library(plotly)
library(spatialEco)
library(dplyr)
# wczytanie rastrów
ndvi_miedzyzdroje <- raster("dane/miedzyzdroje_ndvi.tif")
temp_miedzyzdroje <- raster("dane/miedzyzdroje_temp.tif")
ndvi_WPN <- raster("dane/WPN_ndvi.tif")
temp_WPN <- raster("dane/WPN_temp.tif")
# podglad warstwy
tm_shape(ndvi_miedzyzdroje) + tm_raster()
# zapisanie rastra do ramki danych
ndvi_miedzyzdroje_dt <- values(ndvi_miedzyzdroje)
ndvi_miedzyzdroje_dt <- as.data.frame(ndvi_miedzyzdroje_dt) %>% na.omit()
colnames(ndvi_miedzyzdroje_dt) <- "ndvi"
temp_miedzyzdroje_dt <- values(temp_miedzyzdroje)
temp_miedzyzdroje_dt <- as.data.frame(temp_miedzyzdroje_dt) %>% na.omit
colnames(temp_miedzyzdroje_dt) <- "temp"
ndvi_WPN_dt <- values(ndvi_WPN)
ndvi_WPN_dt <- as.data.frame(ndvi_WPN_dt) %>% na.omit()
colnames(ndvi_WPN_dt) <- "ndvi"
temp_WPN_dt <- values(temp_WPN)
temp_WPN_dt <- as.data.frame(temp_WPN_dt) %>% na.omit()
colnames(temp_WPN_dt) <- "temp"
# styl wykresow
style <- theme(
text = element_text(family = "Trebuchet MS"),
panel.grid.major.x = element_blank(),
plot.background = element_rect(fill = "#222222"),
panel.background = element_rect(fill = "#222222"),
axis.title = element_text(size = 12,
color = "#dddddd"),
plot.title = element_text(size = 18,
color = "#dddddd",
vjust = 2,
hjust = 0.5),
legend.background = element_rect(color = "#222222",
fill = "#777777"),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
axis.text = element_text(size = 10,
color = "#dddddd"),
axis.text.x = element_text(angle = 60, vjust = 0.95, hjust=1))
ndvi_WPN_dt <- ndvi_WPN_dt[seq(1, nrow(ndvi_WPN_dt), 2), ]
ndvi_WPN_dt <- values(ndvi_WPN)
ndvi_WPN_dt <- as.data.frame(ndvi_WPN_dt) %>% na.omit()
colnames(ndvi_WPN_dt) <- "ndvi"
temp_WPN_dt <- values(temp_WPN)
temp_WPN_dt <- as.data.frame(temp_WPN_dt) %>% na.omit()
colnames(temp_WPN_dt) <- "temp"
# Stworzenie histogramu NDVI dla Miedzyzdrojow
hist_ndvi_miedzyzdroje <- ggplotly(
ggplot_build(
ndvi_miedzyzdroje_dt %>%
ggplot(aes(x=ndvi)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Wartość NDVI: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "RdYlGn")) + style +
labs(title = "Rozkład wartości wskaźnika NDVI dla Międzyzdrojów", x = "Wskaźnik NDVI", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_ndvi_miedzyzdroje
object.size(hist_ndvi_miedzyzdroje)
# stworzenie histogramu NDVI dla WPN
hist_ndvi_wpn <- ggplotly(
ggplot_build(
ndvi_WPN_dt %>%
ggplot(aes(x=ndvi)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Wartość NDVI: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "RdYlGn")) + style +
labs(title = "Rozkład wartości wskaźnika NDVI dla WPN", x = "Wskaźnik NDVI", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_ndvi_wpn
object.size(hist_ndvi_wpn)
object.size(hist_ndvi_miedzyzdroje)
# Stworzenie histogramu NDVI dla Miedzyzdrojow
hist_ndvi_miedzyzdroje <- ggplotly(
ggplot_build(
ndvi_miedzyzdroje_dt %>%
ggplot(aes(x=ndvi)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Wartość NDVI: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "RdYlGn")) + style +
labs(title = "Rozkład wartości wskaźnika NDVI dla Międzyzdrojów", x = "Wskaźnik NDVI", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_ndvi_miedzyzdroje
# stworzenie histogramu NDVI dla WPN
hist_ndvi_wpn <- ggplotly(
ggplot_build(
ndvi_WPN_dt %>%
ggplot(aes(x=ndvi)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Wartość NDVI: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "RdYlGn")) + style +
labs(title = "Rozkład wartości wskaźnika NDVI dla WPN", x = "Wskaźnik NDVI", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_ndvi_wpn
Sys.setenv("plotly_username" = "adryanqe")
Sys.setenv("plotly_api_key" = "BWYeEqc9Tcu65gh28WEw")
api_create(hist_ndvi_wpn, "NDVI WPN")
# stworzenie histogramu temperatury dla WPN
# hist_temp_WPN = ggplot(as.data.frame(temp_WPN_dt), aes(x = temp_WPN_dt)) +
#   geom_histogram(fill = hcl.colors(40, palette = "viridis"), bins = 40) +
#   labs(x = "Temperatura [°C]", y = "Liczba") +
#   theme(plot.title = element_text(hjust = 0.5, face = "bold")) + style
# ggplotly(hist_temp_WPN)
#
hist_temp_wpn <- ggplotly(
ggplot_build(
temp_WPN_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "piwo", x = "Wskaźnik NDVI", y = "Liczba") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")),
tooltip = c("text"))
hist_temp_wpn
# stworzenie histogramu temperatury dla WPN
# hist_temp_WPN = ggplot(as.data.frame(temp_WPN_dt), aes(x = temp_WPN_dt)) +
#   geom_histogram(fill = hcl.colors(40, palette = "viridis"), bins = 40) +
#   labs(x = "Temperatura [°C]", y = "Liczba") +
#   theme(plot.title = element_text(hjust = 0.5, face = "bold")) + style
# ggplotly(hist_temp_WPN)
#
hist_temp_wpn <- ggplotly(
ggplot_build(
temp_WPN_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla WPN", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(hjust = 0.5)),
tooltip = c("text"))
hist_temp_wpn
# stworzenie histogramu temperatury dla WPN
# hist_temp_WPN = ggplot(as.data.frame(temp_WPN_dt), aes(x = temp_WPN_dt)) +
#   geom_histogram(fill = hcl.colors(40, palette = "viridis"), bins = 40) +
#   labs(x = "Temperatura [°C]", y = "Liczba") +
#   theme(plot.title = element_text(hjust = 0.5, face = "bold")) + style
# ggplotly(hist_temp_WPN)
#
hist_temp_wpn <- ggplotly(
ggplot_build(
temp_WPN_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla WPN", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(size = 1, hjust = 0.5)),
tooltip = c("text"))
hist_temp_wpn
# stworzenie histogramu temperatury dla WPN
# hist_temp_WPN = ggplot(as.data.frame(temp_WPN_dt), aes(x = temp_WPN_dt)) +
#   geom_histogram(fill = hcl.colors(40, palette = "viridis"), bins = 40) +
#   labs(x = "Temperatura [°C]", y = "Liczba") +
#   theme(plot.title = element_text(hjust = 0.5, face = "bold")) + style
# ggplotly(hist_temp_WPN)
#
hist_temp_wpn <- ggplotly(
ggplot_build(
temp_WPN_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla WPN", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_temp_wpn
object.size(hist_temp_wpn)
api_create(hist_temp_wpn, "Temperatura WPN")
hist_temp_miedzyzdroje <- ggplotly(
ggplot_build(
temp_miedzyzdroje_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 2) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla Międzyzdrojów", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_temp_miedzyzdroje
api_create(hist_temp_miedzyzdroje, "Temperatura Miedzyzdroje")
# korelacja dla obszaru WPN
cor(temp_WPN_dt, ndvi_WPN_dt, method = "pearson")
# korelacja dla obszaru Miedzyzdrojow
cor(temp_miedzyzdroje_dt, ndvi_miedzyzdroje_dt, method = "pearson")
# stworzenie histogramu temperatury dla WPN
# hist_temp_WPN = ggplot(as.data.frame(temp_WPN_dt), aes(x = temp_WPN_dt)) +
#   geom_histogram(fill = hcl.colors(40, palette = "viridis"), bins = 40) +
#   labs(x = "Temperatura [°C]", y = "Liczba") +
#   theme(plot.title = element_text(hjust = 0.5, face = "bold")) + style
# ggplotly(hist_temp_WPN)
#
hist_temp_wpn <- ggplotly(
ggplot_build(
temp_WPN_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 1) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla WPN", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
hist_temp_miedzyzdroje <- ggplotly(
ggplot_build(
temp_miedzyzdroje_dt %>%
ggplot(aes(x=temp)) +
geom_histogram(bins = 40)
)$data[[1]] %>%
ggplot(aes(x=x, y = count, text = paste('<span style = " font-weight:bold"> Liczba: </span>',
'<span>', count ,'</span>',
'</br></br><span style = " font-weight:bold"> Temperatura [°C]: </span>',
'<span>', round(x, 1) ,'</span>'))) +
geom_bar(stat="identity", fill = hcl.colors(40, palette = "viridis")) + style +
labs(title = "Rozkład wartości temperatury dla Międzyzdrojów", x = "Temperatura [°C]", y = "Liczba") +
theme(plot.title = element_text(size = 14, hjust = 0.5)),
tooltip = c("text"))
source('E:/Projekty/wolin_2022/ocena_korelacji/ocena-korelacji-NDVI-main/ocena-korelacji-NDVI/wykresy.R', encoding = 'UTF-8', echo=TRUE)
api_create(hist_temp_wpn, "Temperatura Miedzyzdroje")
api_create(hist_temp_miedzyzdroje, "Temperatura Miedzyzdroje")
api_create(hist_temp_wpn, "Temperatura WPN")
##### NDVI WPN
stats <- function(x){
paste("Srednia:", cellStats(x, mean), '   ',
"Minimum:", cellStats(x, min), '    ',
"Maximum:", cellStats(x, max))
}
stats(ndvi_WPN)
##### NDVI Miedzyzdroje
stats(ndvi_miedzyzdroje)
##### Temperatura WPN
stats(temp_WPN)
##### Temperatura Miedzyzdroje
stats(temp_miedzyzdroje)
plot(ndvi_miedzyzdroje)
